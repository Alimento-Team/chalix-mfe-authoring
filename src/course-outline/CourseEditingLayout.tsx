import React, { useState, useEffect, useRef, useCallback } from 'react';
import { getAuthenticatedUser, getAuthenticatedHttpClient } from '@edx/frontend-platform/auth';
import { getConfig } from '@edx/frontend-platform';
import { useDispatch, useSelector } from 'react-redux';
import { useCourseConfig } from './hooks/useCourseConfig';
import { useQuizData } from './hooks/useQuizData';
import {
  Container,
  Button,
  Card,
  Row,
  Col,
  Toast,
  StandardModal,
  Form,
  FormControl,
  FormCheck,
} from '@openedx/paragon';
import {
  Home as HomeIcon,
  List as ListIcon,
  School as SchoolIcon,
  Person as PersonIcon,
  Search as SearchIcon,
  Notifications as NotificationsIcon,
  Edit as EditIcon,
  PlayCircle as VideoIcon,
  Description as SlideIcon,
  Quiz as QuizIcon,
  MoreVert as MenuIcon,
  Add as AddIcon,
  Delete as DeleteIcon,
  Visibility as PreviewIcon,
  Upload as UploadIcon,
  Settings as SettingsIcon,
} from '@openedx/paragon/icons';
import { XBlock } from '@src/data/types';
import { addVideoFile, deleteVideoFile, fetchVideos, fetchUnitVideos, addVideoUrlToUnit } from '../files-and-videos/videos-page/data/thunks';
import { hasUnitVideos, hasUnitSlides, getUnitVideos } from '../files-and-videos/videos-page/data/selectors';
import { fetchCourseOutlineIndexQuery, fetchCourseSectionQuery } from './data/thunk';
import { addSlideFile, deleteSlideFile, fetchSlides, fetchUnitSlides } from '../files-and-videos/slides-page/data/thunks';
import { RequestStatus } from '../data/constants';
import { useModels } from '../generic/model-store';
import FileViewerModal from './file-viewer/FileViewerModal';
import { updateCourseDetail } from './data/api';

interface CourseEditingLayoutProps {
  courseId: string;
  courseName: string;
  instructorName?: string;
  totalHours?: number;
  sections: XBlock[];
  selectedSectionId?: string;
  onSectionSelect: (sectionId: string) => void;
  onConfigurationEdit: () => void;
}

const CourseEditingLayout: React.FC<CourseEditingLayoutProps> = ({
  courseId,
  courseName,
  instructorName,
  totalHours,
  sections,
  selectedSectionId,
  onSectionSelect,
  onConfigurationEdit,
}) => {
  // Helper to read CSRF token from cookies (Django default csrftoken)
  const getCSRFToken = useCallback(() => {
    try {
      // Try multiple common CSRF cookie names
      const cookieNames = ['csrftoken', 'csrf_token', 'X-CSRFToken'];
      
      for (const cookieName of cookieNames) {
        const match = document.cookie.match(new RegExp('(^|; )' + cookieName + '=([^;]+)'));
        if (match && match[2]) {
          const token = decodeURIComponent(match[2]).trim();
          if (token && token.length > 0) {
            console.log(`üç™ Found CSRF token in ${cookieName} cookie:`, token.substring(0, 8) + '...');
            return token;
          }
        }
      }
      
      console.warn('üç™ No CSRF token found in any cookies');
      return '';
    } catch (e) {
      // eslint-disable-next-line no-console
      console.warn('Unable to read CSRF token from cookies', e);
      return '';
    }
  }, []);
  const dispatch = useDispatch();
  const [selectedSection, setSelectedSection] = useState<XBlock | null>(null);
  const uploadingIdsRef = useRef<{ uploadData: Record<string, any>; uploadCount: number }>({ 
    uploadData: {}, 
    uploadCount: 0 
  });
  const [isUploading, setIsUploading] = useState(false);
  const [uploadMessage, setUploadMessage] = useState<string | null>(null);
  const [showToast, setShowToast] = useState(false);

  // Add state for collapse
  const [videoCollapsed, setVideoCollapsed] = useState(true);

  // Add state for video player modal
  const [showVideoModal, setShowVideoModal] = useState(false);
  const [selectedVideoData, setSelectedVideoData] = useState(null);

  // Add state for video player modal
  const [showVideoPlayerModal, setShowVideoPlayerModal] = useState(false);
  const [currentVideo, setCurrentVideo] = useState(null);
  const [videoErrorCount, setVideoErrorCount] = useState(0); // Track error count to prevent infinite loops

  // Add state for slide functionality
  const [showSlideModal, setShowSlideModal] = useState(false);
  const [selectedSlideData, setSelectedSlideData] = useState(null);
  const [showFileViewerModal, setShowFileViewerModal] = useState(false);
  const [currentSlide, setCurrentSlide] = useState(null);

  // Final evaluation: project question modal state
  const [showProjectModal, setShowProjectModal] = useState(false);
  const [projectQuestion, setProjectQuestion] = useState('');

  // Final evaluation: quiz upload modal state
  const [showQuizUploadModal, setShowQuizUploadModal] = useState(false);
  const [selectedQuizFile, setSelectedQuizFile] = useState<File | null>(null);
  const [quizUploadPreview, setQuizUploadPreview] = useState<any>(null);

  // Add state for quiz functionality
  const [showQuizModal, setShowQuizModal] = useState(false);
  const [showQuizListModal, setShowQuizListModal] = useState(false);
  const [showQuizPreviewModal, setShowQuizPreviewModal] = useState(false);
  const [selectedQuizData, setSelectedQuizData] = useState(null);
  const [currentPreviewQuiz, setCurrentPreviewQuiz] = useState(null);
  const [editingQuizId, setEditingQuizId] = useState(null);
  const [quizData, setQuizData] = useState({
    question: '',
    choices: [''],
    correctAnswers: [],
    multipleChoice: false,
  });

  // Video source selection modal state
  const [showVideoSourceModal, setShowVideoSourceModal] = useState(false);
  const [selectedVideoUnit, setSelectedVideoUnit] = useState<XBlock | null>(null);

  // Video URL input modal state
  const [showVideoUrlModal, setShowVideoUrlModal] = useState(false);
  const [videoUrl, setVideoUrl] = useState('');
  const [videoUrlError, setVideoUrlError] = useState('');
  const [isSubmittingUrl, setIsSubmittingUrl] = useState(false);

  // Fetch course configuration from Chalix API
  const { courseConfig, isLoading: isConfigLoading, error: configError, refetch: refetchConfig } = useCourseConfig(courseId);
  
  // Fetch quiz data for the selected unit
  const { quizzes, loading: quizzesLoading, hasQuizzes, refetch: refetchQuizzes } = useQuizData({
    courseId,
    unitId: selectedSection?.id,
  });
  
  // Get current user information
  const currentUser = getAuthenticatedUser(); // Instructor name should come from course details, not current user
  
  // Use course config data if available, otherwise fall back to props or default values
  const displayInstructorName = courseConfig?.instructor || instructorName || 'Ch∆∞a ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh';
  // Display current authenticated user's full name in the header (prefer profile.name, then first/last name, then username/email)
  const displayUserName = currentUser
    ? (currentUser.profile?.name || `${(currentUser.first_name || '').trim()} ${(currentUser.last_name || '').trim()}`.trim() || currentUser.username || currentUser.email)
    : '';
  const displayTotalHours = courseConfig?.estimated_hours || totalHours;
  const displayOnlineCourseLink = courseConfig?.online_course_link;

  // Additional course-level display fields
  const displayCourseType = courseConfig?.courseType || courseConfig?.type || '';
  const displayCourseLevel = courseConfig?.courseLevel || courseConfig?.level || '';
  const displayShortDescription = courseConfig?.short_description || courseConfig?.shortDescription || '';
  const displayStartDateRaw = courseConfig?.start_date || (courseConfig as any)?.start || null;
  const displayEndDateRaw = courseConfig?.end_date || (courseConfig as any)?.end || null;
  const displayStartDate = displayStartDateRaw ? new Date(displayStartDateRaw).toLocaleDateString('vi-VN') : null;
  const displayEndDate = displayEndDateRaw ? new Date(displayEndDateRaw).toLocaleDateString('vi-VN') : null;

  // Helper to determine if course has started. Prefer canonical start_date then legacy start.
  const isCourseStarted = (cfg?: { start_date?: string | null }) => {
    if (!cfg) return false;
    const raw = cfg.start_date || (cfg as any).start || null;
    if (!raw) return false;
    const start = new Date(raw);
    return start <= new Date();
  };

  // Handler to start the course now by setting start_date to current time
  const handleStartCourseNow = async () => {
    try {
      // Use only the current date (no time) to represent "today" in a backend-friendly format
      const now = new Date();
      const yyyy = now.getFullYear();
      const mm = String(now.getMonth() + 1).padStart(2, '0');
      const dd = String(now.getDate()).padStart(2, '0');
      const todayDate = `${yyyy}-${mm}-${dd}`; // e.g. 2025-10-04
      
      // Only send start_date - don't include other fields to avoid overwriting them
      const payload = {
        start_date: todayDate,
      };
      
      await updateCourseDetail(courseId, payload);
      // Refresh local config to show updated start date
      refetchConfig();
    } catch (err) {
      // eslint-disable-next-line no-console
      console.error('Failed to start course now', err);
      alert('Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu kh√≥a h·ªçc ngay b√¢y gi·ªù. Vui l√≤ng th·ª≠ l·∫°i.');
    }
  };

  // Video click handler
  const handleVideoClick = (selectedUnit: XBlock) => {
    // Use the unit videos from the selector
    // For now, just open video gallery for the user to select/assign a video
    // In a future iteration, this could open a dedicated video player
    if (unitVideos.length > 0) {
      setSelectedVideoData({
        unit: selectedUnit,
        videos: unitVideos,
      });
      setShowVideoModal(true);
    }
  };

  // Delete video handler
  const handleDeleteVideo = async (videoId: string, videoName: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° video "${videoName}"?`)) {
      try {
        await dispatch(deleteVideoFile(courseId, videoId));
        // Refresh the video list after deletion
        setSelectedVideoData(prevData => ({
          ...prevData,
          videos: prevData?.videos.filter(v => v.edxVideoId !== videoId) || [],
        }));
        alert('Xo√° video th√†nh c√¥ng!');
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error('Failed to delete video:', error);
        alert('Xo√° video th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  // Play video handler
  const handlePlayVideo = (video: any) => {
    // Use the original video object without transformation since publicUrl is correct
    setCurrentVideo(video);
    setVideoErrorCount(0); // Reset error count for new video
    setShowVideoModal(false); // Close selection modal
    setShowVideoPlayerModal(true); // Open player modal
  };  // Slide click handler
  const handleSlideClick = (selectedUnit: XBlock) => {
    if (courseSlides.length > 0) {
      setSelectedSlideData({
        unit: selectedUnit,
        slides: courseSlides,
      });
      setShowSlideModal(true);
    }
  };

  // Delete slide handler
  const handleDeleteSlide = async (slideId: string, slideName: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° slide "${slideName}"?`)) {
      try {
        await dispatch(deleteSlideFile(courseId, slideId));
        // Refresh the slide list after deletion
        setSelectedSlideData(prevData => ({
          ...prevData,
          slides: prevData?.slides.filter(s => s.slideId !== slideId) || [],
        }));
        alert('Xo√° slide th√†nh c√¥ng!');
      } catch (error) {
        // eslint-disable-next-line no-console
        console.error('Failed to delete slide:', error);
        alert('Xo√° slide th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  // View slide handler
  const handleViewSlide = (slide: any) => {
    setCurrentSlide(slide);
    setShowSlideModal(false); // Close selection modal
    setShowFileViewerModal(true); // Open viewer modal
  };

  // Quiz click handler (to view quiz list)
  const handleQuizClick = (selectedUnit: XBlock) => {
    if (hasQuizzes && quizzes.length > 0) {
      setSelectedQuizData({
        unit: selectedUnit,
        quizzes: quizzes,
      });
      setShowQuizListModal(true);
    }
  };

  // Delete quiz handler
  const handleDeleteQuiz = async (quizId: number, quizTitle: string) => {
    if (confirm(`B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° c√¢u h·ªèi "${quizTitle}"?`)) {
      try {
        const { deleteQuiz } = await import('./data/quizService');
        const response = await deleteQuiz(quizId);
        
        if (response.success) {
          // Refresh quiz data and update the modal
          refetchQuizzes();
          setSelectedQuizData(prevData => ({
            ...prevData,
            quizzes: prevData?.quizzes.filter(q => q.id !== quizId) || [],
          }));
          alert('Xo√° c√¢u h·ªèi th√†nh c√¥ng!');
        } else {
          throw new Error(response.error || 'Kh√¥ng th·ªÉ xo√° c√¢u h·ªèi');
        }
      } catch (error) {
        console.error('Failed to delete quiz:', error);
        alert('Xo√° c√¢u h·ªèi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
      }
    }
  };

  // Quiz creation handler
  const handleQuizCreate = () => {
    resetQuizForm();
    setShowQuizModal(true);
  };

  // Quiz form handlers
  const addChoice = () => {
    setQuizData(prev => ({
      ...prev,
      choices: [...prev.choices, '']
    }));
  };

  const removeChoice = (index: number) => {
    if (quizData.choices.length > 1) {
      const newChoices = quizData.choices.filter((_, i) => i !== index);
      const newCorrectAnswers = quizData.correctAnswers.filter(i => i !== index).map(i => i > index ? i - 1 : i);
      setQuizData(prev => ({
        ...prev,
        choices: newChoices,
        correctAnswers: newCorrectAnswers
      }));
    }
  };

  const updateChoice = (index: number, value: string) => {
    const newChoices = [...quizData.choices];
    newChoices[index] = value;
    setQuizData(prev => ({
      ...prev,
      choices: newChoices
    }));
  };

  const toggleCorrectAnswer = (index: number) => {
    let newCorrectAnswers;
    if (quizData.multipleChoice) {
      // Multiple choice: toggle answer
      if (quizData.correctAnswers.includes(index)) {
        newCorrectAnswers = quizData.correctAnswers.filter(i => i !== index);
      } else {
        newCorrectAnswers = [...quizData.correctAnswers, index];
      }
    } else {
      // Single choice: only one answer
      newCorrectAnswers = quizData.correctAnswers.includes(index) ? [] : [index];
    }
    
    setQuizData(prev => ({
      ...prev,
      correctAnswers: newCorrectAnswers
    }));
  };

  // Handle quiz preview
  const handlePreviewQuiz = async (quiz) => {
    try {
      // Import the getQuizDetails function dynamically
      const { getQuizDetails } = await import('./data/quizService');
      const response = await getQuizDetails(quiz.id);
      
      if (response.success && response.quiz?.questions) {
        setCurrentPreviewQuiz({
          ...quiz,
          questions: response.quiz.questions
        });
        setShowQuizPreviewModal(true);
      } else {
        alert('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt c√¢u h·ªèi');
      }
    } catch (error) {
      console.error('Error fetching quiz details:', error);
      alert('L·ªói khi t·∫£i chi ti·∫øt c√¢u h·ªèi');
    }
  };

  // Handle quiz edit
  const handleEditQuiz = async (quiz) => {
    try {
      // Import the getQuizDetails function dynamically
      const { getQuizDetails } = await import('./data/quizService');
      const response = await getQuizDetails(quiz.id);
      
      if (response.success && response.quiz?.questions) {
        const firstQuestion = response.quiz.questions[0];
        if (firstQuestion) {
          // Populate the form with existing data
          setQuizData({
            question: firstQuestion.question_text,
            choices: firstQuestion.choices.map(choice => choice.text),
            correctAnswers: firstQuestion.choices
              .map((choice, index) => choice.is_correct ? index : -1)
              .filter(index => index !== -1),
            multipleChoice: firstQuestion.question_type === 'multiple_choice',
          });
          setEditingQuizId(quiz.id);
          setShowQuizModal(true);
          setShowQuizListModal(false);
        }
      } else {
        alert('Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt c√¢u h·ªèi ƒë·ªÉ ch·ªânh s·ª≠a');
      }
    } catch (error) {
      console.error('Error fetching quiz details for edit:', error);
      alert('L·ªói khi t·∫£i chi ti·∫øt c√¢u h·ªèi');
    }
  };

  // Reset quiz form
  const resetQuizForm = () => {
    setQuizData({
      question: '',
      choices: [''],
      correctAnswers: [],
      multipleChoice: false,
    });
    setEditingQuizId(null);
  };

  // üéØ Final Evaluation Handlers
  const handleProjectQuestionConfig = () => {
    // Open modal to edit project question
    console.log('üéØ Opening project question configuration');
    setProjectQuestion(courseConfig?.final_evaluation_project_question || '');
    setShowProjectModal(true);
  };

  const handleQuizExcelUpload = () => {
    console.log('üéØ Opening quiz Excel upload');
    setSelectedQuizFile(null);
    setShowQuizUploadModal(true);
  };

  const handleEvaluationConfig = () => {
    console.log('üéØ Opening evaluation configuration');
    // Navigate to course settings
    if (onConfigurationEdit) {
      onConfigurationEdit();
    } else {
      alert('V√†o c√†i ƒë·∫∑t kh√≥a h·ªçc ƒë·ªÉ ch·ªçn h√¨nh th·ª©c ki·ªÉm tra cu·ªëi kh√≥a');
    }
  };

  // Save project question (final evaluation - N·ªôp b√†i thu ho·∫°ch)
  const saveProjectQuestion = async () => {
    try {
      setIsUploading(true);
      await updateCourseDetail(courseId, { final_evaluation_project_question: projectQuestion });
      // refresh config
      refetchConfig();
      setShowProjectModal(false);
      setUploadMessage('L∆∞u c√¢u h·ªèi th√†nh c√¥ng!');
      setShowToast(true);
      setTimeout(() => setShowToast(false), 2500);
    } catch (err) {
      console.error('Failed to save project question', err);
      setUploadMessage('L∆∞u c√¢u h·ªèi th·∫•t b·∫°i.');
      setShowToast(true);
      setTimeout(() => setShowToast(false), 3000);
    } finally {
      setIsUploading(false);
    }
  };

  // Upload quiz Excel file for final evaluation (L√†m b√†i tr·∫Øc nghi·ªám)
  const uploadQuizExcel = async () => {
    if (!selectedQuizFile) {
      alert('Vui l√≤ng ch·ªçn file Excel ƒë·ªÉ t·∫£i l√™n');
      return;
    }

    try {
      setIsUploading(true);
      setUploadMessage('ƒêang x·ª≠ l√Ω file Excel...');
      setShowToast(true);

      // Parse Excel file locally
      const { parseQuizExcel, createIndividualQuizzes } = await import('./data/excelQuizParser');
      const parseResult = await parseQuizExcel(selectedQuizFile);

      if (!parseResult.success) {
        throw new Error(parseResult.error);
      }

      setUploadMessage('ƒêang t·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám...');
      setQuizUploadPreview({
        summary: parseResult.summary,
        sampleQuestions: parseResult.quizzes.slice(0, 3) // Show first 3 questions as preview
      });

      // Create quizzes using existing quiz service
      const { createQuiz } = await import('./data/quizService');
      const results = await createIndividualQuizzes(
        parseResult.quizzes,
        courseId,
        selectedSection?.id,
        createQuiz
      );

      const successCount = results.filter(r => r.success).length;
      const failCount = results.filter(r => !r.success).length;

      if (successCount > 0) {
        setUploadMessage(`T·∫°o th√†nh c√¥ng ${successCount} c√¢u h·ªèi${failCount > 0 ? `, ${failCount} c√¢u th·∫•t b·∫°i` : ''}!`);
        // Refresh quiz data to show new quizzes
        refetchQuizzes();
      } else {
        throw new Error('Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi n√†o');
      }

      setTimeout(() => setShowToast(false), 3000);
      // Keep modal open to show results
    } catch (err) {
      console.error('Quiz Excel processing failed:', err);
      setUploadMessage(`X·ª≠ l√Ω th·∫•t b·∫°i: ${err.message}`);
      setShowToast(true);
      setTimeout(() => setShowToast(false), 5000);
    } finally {
      setIsUploading(false);
    }
  };

  const handleQuizSubmit = async () => {
    // Validate form
    if (!quizData.question.trim()) {
      alert('Vui l√≤ng nh·∫≠p c√¢u h·ªèi');
      return;
    }
    if (quizData.choices.some(choice => !choice.trim())) {
      alert('Vui l√≤ng nh·∫≠p t·∫•t c·∫£ c√°c l·ª±a ch·ªçn');
      return;
    }
    if (quizData.correctAnswers.length === 0) {
      alert('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ƒë√°p √°n ƒë√∫ng');
      return;
    }

    if (!selectedSection && !editingQuizId) {
      alert('Vui l√≤ng ch·ªçn chuy√™n ƒë·ªÅ ƒë·ªÉ t·∫°o quiz');
      return;
    }

    try {
      const isEditing = editingQuizId !== null;
      
      // Show loading state
      setUploadMessage(isEditing ? 'ƒêang c·∫≠p nh·∫≠t c√¢u h·ªèi...' : 'ƒêang t·∫°o c√¢u h·ªèi...');
      setShowToast(true);

      console.log('Selected section:', selectedSection);
      console.log('Course ID:', courseId);
      console.log('Editing quiz ID:', editingQuizId);

      if (isEditing) {
        // Update existing quiz
        const quizUpdateData = {
          quiz_title: quizData.question.substring(0, 100), // Use first part of question as title
          quiz_description: '',
          questions: [{
            question_text: quizData.question,
            question_type: quizData.multipleChoice ? 'multiple_choice' as const : 'single_choice' as const,
            choices: quizData.choices.map((choice, index) => ({
              text: choice,
              is_correct: quizData.correctAnswers.includes(index)
            }))
          }]
        };

        console.log('Quiz update payload:', quizUpdateData);

        // Import the updateQuiz function dynamically
        const { updateQuiz } = await import('./data/quizService');
        const response = await updateQuiz(editingQuizId, quizUpdateData);

        if (response.success) {
          setUploadMessage('C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng!');
          setTimeout(() => setShowToast(false), 3000);
          
          // Refresh quiz data to show the updated quiz
          refetchQuizzes();
          
          // Close modal and reset form
          setShowQuizModal(false);
          resetQuizForm();

          console.log('Quiz updated successfully:', response.quiz);
        } else {
          throw new Error(response.error || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t c√¢u h·ªèi');
        }
      } else {
        // Create new quiz
        const quizRequest = {
          course_key: courseId,
          parent_locator: selectedSection.id,
          quiz_title: quizData.question.substring(0, 100), // Use first part of question as title
          quiz_description: '',
          questions: [{
            question_text: quizData.question,
            question_type: quizData.multipleChoice ? 'multiple_choice' as const : 'single_choice' as const,
            choices: quizData.choices.map((choice, index) => ({
              text: choice,
              is_correct: quizData.correctAnswers.includes(index)
            }))
          }]
        };

        console.log('Quiz request payload:', quizRequest);

        // Import the createQuiz function dynamically to avoid import issues
        const { createQuiz } = await import('./data/quizService');
        const response = await createQuiz(quizRequest);

        if (response.success) {
          setUploadMessage('T·∫°o c√¢u h·ªèi th√†nh c√¥ng!');
          setTimeout(() => setShowToast(false), 3000);
          
          // Refresh quiz data to show the new quiz
          refetchQuizzes();
          
          // Close modal and reset form
          setShowQuizModal(false);
          resetQuizForm();

          console.log('Quiz created successfully:', response.quiz);
        } else {
          throw new Error(response.error || 'Kh√¥ng th·ªÉ t·∫°o c√¢u h·ªèi');
        }
      }
    } catch (error) {
      console.error('Error with quiz operation:', error);
      console.error('Error response:', error.response);
      console.error('Error message:', error.message);
      
      let errorMessage = editingQuizId 
        ? 'C·∫≠p nh·∫≠t c√¢u h·ªèi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.' 
        : 'T·∫°o c√¢u h·ªèi th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.';
      if (error.response?.status === 403) {
        errorMessage = 'Kh√¥ng c√≥ quy·ªÅn t·∫°o c√¢u h·ªèi cho kh√≥a h·ªçc n√†y.';
      } else if (error.response?.status === 400) {
        errorMessage = `D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: ${error.response?.data?.error || 'Vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.'}`;
      } else if (error.response?.status >= 500) {
        errorMessage = 'L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau.';
      }
      
      setUploadMessage(errorMessage);
      setTimeout(() => setShowToast(false), 5000);
    }
  };

  // Video/Slide upload handler
  const handleVideoUpload = async (contentType: 'video' | 'slide') => {
    console.log('handleVideoUpload called with contentType:', contentType);
    if (isUploading) { 
      console.log('Upload already in progress, returning early');
      return; 
    }

    const input = document.createElement('input');
    input.type = 'file';
    input.accept = contentType === 'video' ? 'video/*' : '.pdf,.docx';
    input.multiple = false;

    input.onchange = async (event) => {
      console.log('File input change event triggered');
      const { files } = (event.target as HTMLInputElement);
      console.log('Selected files:', files);
      
      if (files && files.length > 0) {
        console.log('Starting upload process for', files.length, 'files');
        setIsUploading(true);
        setUploadMessage('ƒêang t·∫£i l√™n...');
        setShowToast(true);

        try {
          const filesArray = Array.from(files);
          console.log('Files array:', filesArray);
          
          if (contentType === 'video') {
            console.log('Uploading video files');
            const videoIds: string[] = []; // Existing video IDs for the course
            const unitId = selectedSection?.id; // Get the current unit ID
            await dispatch(addVideoFile(
              courseId,
              filesArray,
              videoIds,
              uploadingIdsRef,
              unitId, // Pass unit ID for unit-specific upload
            ));
            // Refresh video list after successful upload
            if (unitId) {
              await dispatch(fetchUnitVideos(unitId));
            } else {
              await dispatch(fetchVideos(courseId));
            }
          } else if (contentType === 'slide') {
            console.log('Uploading slide files');
            console.log('courseId:', courseId);
            console.log('unitId:', selectedSection?.id);
            console.log('uploadingIdsRef.current:', uploadingIdsRef.current);
            const slideIds: string[] = []; // Existing slide IDs for the course
            const unitId = selectedSection?.id; // Get the current unit ID
            await dispatch(addSlideFile(
              courseId,
              filesArray,
              slideIds,
              uploadingIdsRef,
              unitId, // Pass unit ID for unit-specific upload
            ));
            console.log('addSlideFile dispatch completed');
            // Refresh slide list after successful upload
            if (unitId) {
              await dispatch(fetchUnitSlides(unitId));
            } else {
              await dispatch(fetchSlides(courseId));
            }
          }
          setUploadMessage('T·∫£i l√™n th√†nh c√¥ng!');
          setTimeout(() => setShowToast(false), 3000);
        } catch (error) {
          console.error('Upload failed:', error);
          setUploadMessage('T·∫£i l√™n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
          setTimeout(() => setShowToast(false), 3000);
        } finally {
          setIsUploading(false);
        }
      }
    };

    console.log('Triggering file input click');
    input.click();
  };

  // New video creation handler - shows source selection popup
  const handleVideoCreate = (unit: XBlock) => {
    setSelectedVideoUnit(unit);
    setShowVideoSourceModal(true);
  };

  // Handle video source selection
  const handleVideoSourceSelection = (sourceType: 'upload' | 'url') => {
    setShowVideoSourceModal(false);
    
    if (sourceType === 'upload') {
      // Use existing upload flow
      handleVideoUpload('video');
    } else if (sourceType === 'url') {
      // Show URL input modal
      setVideoUrl('');
      setVideoUrlError('');
      setShowVideoUrlModal(true);
    }
  };

  // Handle video URL submission - Use Redux flow like file uploads
  const handleVideoUrlSubmit = async () => {
    console.log('üé¨ handleVideoUrlSubmit called with URL:', videoUrl);
    
    if (!videoUrl.trim()) {
      setVideoUrlError('Vui l√≤ng nh·∫≠p URL video');
      return;
    }

    // Basic URL validation
    try {
      new URL(videoUrl);
    } catch {
      setVideoUrlError('URL kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra l·∫°i.');
      return;
    }

    // Check if it's a supported video URL (YouTube, Google Drive)
    const isYoutube = /(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})/i.test(videoUrl);
    const isGoogleDrive = /drive\.google\.com\/file\/d\/([a-zA-Z0-9-_]+)/i.test(videoUrl);
    
    if (!isYoutube && !isGoogleDrive) {
      setVideoUrlError('Hi·ªán t·∫°i ch·ªâ h·ªó tr·ª£ URL t·ª´ YouTube v√† Google Drive');
      return;
    }

    try {
      setVideoUrlError('');
      setIsSubmittingUrl(true);
      
      const unitId = selectedVideoUnit?.id || selectedSection?.id;
      const videoSourceType = isYoutube ? 'youtube' : 'google_drive';
      const displayName = isYoutube ? 'YouTube Video' : 'Google Drive Video';
      
      console.log('ÔøΩ Creating external video using Redux flow:', {
        unitId,
        videoUrl: videoUrl.trim(),
        videoSourceType,
        displayName,
      });
      
      // Use the new Redux action for external video URLs
      const result = await dispatch(addVideoUrlToUnit(
        unitId,
        videoUrl.trim(),
        videoSourceType,
        displayName
      ));
      
      if (result.success) {
        console.log('‚úÖ External video created successfully');
        
        // Close modal and show success message
        setShowVideoUrlModal(false);
        setVideoUrl('');
        setUploadMessage('‚úÖ ƒê√£ t·∫°o video th√†nh c√¥ng!');
        setShowToast(true);
        setTimeout(() => setShowToast(false), 3000);
      } else {
        console.error('‚ùå Failed to create external video:', result.error);
        setVideoUrlError(result.error || 'Kh√¥ng th·ªÉ t·∫°o video t·ª´ URL n√†y.');
      }
      
    } catch (error) {
      console.error('Error adding video URL:', error);
      setVideoUrlError('C√≥ l·ªói x·∫£y ra khi th√™m video. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setIsSubmittingUrl(false);
    }
  };

  // Get all units from sections (flattened)
  const getAllUnits = () => {
    const units: Array<XBlock & { sectionTitle?: string }> = [];
    sections.forEach(section => {
      if (section?.childInfo?.children) {
        section.childInfo.children.forEach(subsection => {
          if (subsection?.childInfo?.children) {
            subsection.childInfo.children.forEach(unit => {
              units.push({
                ...unit,
                sectionTitle: section.displayName,
              });
            });
          }
        });
      }
    });
    return units;
  };

  const allUnits = getAllUnits();

  // Find selected unit when selectedSectionId changes (using it as selectedUnitId)
  useEffect(() => {
    console.log('selectedSectionId changed:', selectedSectionId);
    if (selectedSectionId) {
      const unit = allUnits.find(u => u.id === selectedSectionId);
      console.log('Found unit for selectedSectionId:', unit?.id, unit?.displayName);
      if (unit && (!selectedSection || selectedSection.id !== unit.id)) {
        console.log('Setting selectedSection to:', unit.id);
        console.log('Previous selectedSection:', selectedSection?.id);
        console.log('New unit:', unit);
        setSelectedSection(unit);
        console.log('setSelectedSection called');
      } else {
        console.log('NOT setting selectedSection - unit already selected:', unit?.id);
      }
    } else if (allUnits.length > 0 && (!selectedSection || selectedSection.id !== allUnits[0].id)) {
      console.log('Setting selectedSection to first unit:', allUnits[0].id);
      setSelectedSection(allUnits[0]);
      if (onSectionSelect) {
        onSectionSelect(allUnits[0].id);
      }
    }
  }, [selectedSectionId, allUnits]);

  // Fetch course videos on component mount
  useEffect(() => {
    if (courseId) {
      dispatch(fetchVideos(courseId));
      dispatch(fetchSlides(courseId));
    }
  }, [courseId, dispatch]);

  // Fetch unit-specific media when selectedSection changes
  useEffect(() => {
    console.log('selectedSection changed:', selectedSection?.id, selectedSection?.displayName);
    if (selectedSection?.id) {
      console.log('Dispatching fetchUnitVideos for unit:', selectedSection.id);
      dispatch(fetchUnitVideos(selectedSection.id));
      console.log('Dispatching fetchUnitSlides for unit:', selectedSection.id);
      dispatch(fetchUnitSlides(selectedSection.id));
      
      // üéØ Check if this is a final evaluation unit and show unit editor URL
      if (selectedSection?.displayName?.includes('ki·ªÉm tra cu·ªëi')) {
        console.log('üéØ FINAL EVALUATION UNIT DETECTED!');
        console.log('üéØ To edit this unit, navigate to: http://apps.local.openedx.io:2001/container/' + selectedSection.id);
        console.log('üéØ Current URL is course outline - you need to click the unit to access the editor');
        
        // Show a prominent alert with navigation button
        setTimeout(() => {
          if (confirm('üéØ Final Evaluation Unit Detected!\n\nThis unit requires the special Final Evaluation Editor.\n\nClick OK to navigate to the unit editor, or Cancel to stay on the course outline.')) {
            window.location.href = 'http://apps.local.openedx.io:2001/container/' + selectedSection.id;
          }
        }, 1000);
      }
    }
  }, [selectedSection?.id, dispatch]);

  // Get content items for selected unit (videos, slides, quizzes)
  const getContentItems = (selectedUnit: XBlock, hasVideos: boolean, hasSlides: boolean, hasQuizzes: boolean) => {
    // For new units, start with empty content that can be uploaded/created
    const unitIndex = allUnits.findIndex(u => u.id === selectedUnit.id) + 1;
    return [
      {
        type: 'video',
        title: 'Video b√†i gi·∫£ng',
        subtitle: hasVideos ? `${unitIndex}. ${selectedUnit.displayName} - B·∫•m ƒë·ªÉ xem Video b√†i gi·∫£ng` : `${unitIndex}. ${selectedUnit.displayName} - Ch∆∞a c√≥ video`,
        icon: VideoIcon,
        primaryAction: 'T·∫°o m·ªõi',
        secondaryAction: 'Xo√°',
        hasContent: hasVideos,
        onClick: hasVideos ? () => handleVideoClick(selectedUnit) : undefined,
      },
      {
        type: 'slide',
        title: 'Slide b√†i gi·∫£ng',
        subtitle: hasSlides ? `${unitIndex}. ${selectedUnit.displayName} - B·∫•m ƒë·ªÉ xem Slide b√†i gi·∫£ng` : 'Ch∆∞a c√≥ slide cho chuy√™n ƒë·ªÅ n√†y',
        icon: SlideIcon,
        primaryAction: 'T·∫£i l√™n m·ªõi',
        secondaryAction: 'Xo√°',
        hasContent: hasSlides,
        onClick: hasSlides ? () => handleSlideClick(selectedUnit) : undefined,
      },
      {
        type: 'quiz',
        title: 'Tr·∫Øc nghi·ªám',
        subtitle: hasQuizzes ? `ƒê√£ t·∫°o ${quizzes.length} c√¢u h·ªèi tr·∫Øc nghi·ªám` : 'Ch∆∞a c√≥ c√¢u h·ªèi tr·∫Øc nghi·ªám',
        icon: QuizIcon,
        primaryAction: 'T·∫°o m·ªõi',
        secondaryAction: 'Xo√°',
        hasContent: hasQuizzes,
        onClick: hasQuizzes ? () => handleQuizClick(selectedUnit) : undefined,
        onQuizCreate: () => handleQuizCreate(),
      },
    ];
  };

  // Simplified video checking - only check uploaded videos  
  const unitHasVideos = useSelector(state => {
    if (!selectedSection?.id) return false;
    return hasUnitVideos(state, selectedSection.id);
  });
  // Simplified video list - only get uploaded videos
  const unitVideos = useSelector(state => {
    if (!selectedSection?.id) return [];
    return getUnitVideos(state, selectedSection.id);
  });
  
  // Use course-level slide checking
  const allSlides = useSelector(state => state.models?.slides || {});
  const courseSlides = Object.values(allSlides);
  const unitHasSlides = courseSlides.length > 0;
  
  // üéØ Final Evaluation Detection
  const isFinalEvaluationUnit = !!(
    selectedSection?.displayName?.includes('Ki·ªÉm tra cu·ªëi') || 
    selectedSection?.displayName?.includes('ki·ªÉm tra cu·ªëi')
  );

  // Get final evaluation content items based on course configuration
  const getFinalEvaluationItems = (selectedUnit: XBlock) => {
    const evaluationTypeRaw = courseConfig?.final_evaluation_type || '';
    const evaluationType = String(evaluationTypeRaw).toLowerCase();

    // Support both backend short keys ('project' | 'quiz') and Vietnamese labels
    const isProjectSubmission = (
      evaluationType.includes('project') ||
      evaluationType.includes('n·ªôp') ||
      evaluationType.includes('thu ho·∫°ch') ||
      evaluationType.includes('n·ªôp b√†i thu ho·∫°ch')
    );
    const isMultipleChoice = (
      evaluationType.includes('quiz') ||
      evaluationType.includes('tr·∫Øc nghi·ªám') ||
      evaluationType.includes('l√†m b√†i tr·∫Øc nghi·ªám') ||
      evaluationType.includes('l√†m b√†i')
    );

    console.log('üéØ Final Evaluation Type:', { 
      evaluationType, 
      isProjectSubmission, 
      isMultipleChoice,
      courseType: courseConfig?.course_type,
      fullConfig: courseConfig 
    });

    if (isProjectSubmission) {
      const hasProjectQuestion = !!(courseConfig?.final_evaluation_project_question && courseConfig.final_evaluation_project_question.trim());
      
      return [
        {
          type: 'project-question',
          title: 'C√¢u h·ªèi b√†i thu ho·∫°ch',
          subtitle: hasProjectQuestion 
            ? 'ƒê√£ thi·∫øt l·∫≠p c√¢u h·ªèi b√†i thu ho·∫°ch - B·∫•m ƒë·ªÉ xem/ch·ªânh s·ª≠a'
            : 'Thi·∫øt l·∫≠p c√¢u h·ªèi cho h·ªçc vi√™n n·ªôp b√†i thu ho·∫°ch',
          icon: EditIcon,
          primaryAction: hasProjectQuestion ? 'Ch·ªânh s·ª≠a c√¢u h·ªèi' : 'C·∫•u h√¨nh c√¢u h·ªèi',
          secondaryAction: 'Xem tr∆∞·ªõc',
          hasContent: hasProjectQuestion,
          onProjectConfig: handleProjectQuestionConfig,
        }
      ];
    } else if (isMultipleChoice) {
      const hasQuizQuestions = hasQuizzes && quizzes.length > 0;
      
      return [
        {
          type: 'quiz-upload',
          title: 'T·∫£i l√™n ƒë·ªÅ thi tr·∫Øc nghi·ªám',
          subtitle: hasQuizQuestions
            ? `ƒê√£ t·∫°o ${quizzes.length} c√¢u h·ªèi tr·∫Øc nghi·ªám - B·∫•m ƒë·ªÉ xem danh s√°ch`
            : 'Upload file Excel ch·ª©a c√¢u h·ªèi tr·∫Øc nghi·ªám',
          icon: UploadIcon,
          primaryAction: hasQuizQuestions ? 'Xem c√¢u h·ªèi' : 'T·∫£i l√™n Excel',
          secondaryAction: 'T·∫£i template',
          hasContent: hasQuizQuestions,
          onQuizUpload: hasQuizQuestions ? () => handleQuizClick(selectedUnit) : handleQuizExcelUpload,
        }
      ];
    } else {
      return [
        {
          type: 'evaluation-config',
          title: 'C·∫•u h√¨nh ki·ªÉm tra cu·ªëi kh√≥a',
          subtitle: 'Ch∆∞a thi·∫øt l·∫≠p h√¨nh th·ª©c ki·ªÉm tra. V√†o c√†i ƒë·∫∑t kh√≥a h·ªçc ƒë·ªÉ ch·ªçn "N·ªôp b√†i thu ho·∫°ch" ho·∫∑c "L√†m b√†i tr·∫Øc nghi·ªám"',
          icon: SettingsIcon,
          primaryAction: 'C√†i ƒë·∫∑t kh√≥a h·ªçc',
          hasContent: false,
          onEvaluationConfig: handleEvaluationConfig,
        }
      ];
    }
  };

  const contentItems = selectedSection ? (
    isFinalEvaluationUnit 
      ? getFinalEvaluationItems(selectedSection)
      : getContentItems(selectedSection, unitHasVideos, unitHasSlides, hasQuizzes)
  ) : [];

  return (
    <div className="course-editing-layout bg-white min-vh-100">
      {/* Header */}
      <header className="course-editing-header">
        <div className="course-editing-header-top bg-primary text-white py-3">
          <Container fluid className="px-4">
            <Row className="align-items-center">
              <Col lg={8}>
                <h6 className="mb-0 font-weight-bold">
                  PH·∫¶N M·ªÄM H·ªåC T·∫¨P TH√îNG MINH D√ÄNH CHO C√îNG CH·ª®C, VI√äN CH·ª®C
                </h6>
              </Col>
              <Col lg={4} xs="auto" className="d-flex align-items-center justify-content-end">
                <span className="me-4">{displayUserName || ''}</span>
                <div className="course-editing-user-avatar bg-light rounded-circle p-2 me-3">
                  <PersonIcon size="sm" className="text-primary" />
                </div>
                <NotificationsIcon size="sm" className="text-white" />
              </Col>
            </Row>
          </Container>
        </div>

        <div className="course-editing-header-nav bg-white border-bottom">
          <Container fluid className="px-4">
            <Row className="align-items-center py-3">
              <Col lg={7} xs={12} className="mb-2 mb-lg-0">
                <div className="d-flex course-editing-nav-items justify-content-start">
                  <Button variant="link" className="course-editing-nav-item active">
                    <HomeIcon size="sm" className="me-2" />
                    Trang ch·ªß
                  </Button>
                  <Button variant="link" className="course-editing-nav-item">
                    <ListIcon size="sm" className="me-2" />
                    Danh m·ª•c
                  </Button>
                  <Button variant="link" className="course-editing-nav-item">
                    <SchoolIcon size="sm" className="me-2" />
                    H·ªçc t·∫≠p
                  </Button>
                  <Button variant="link" className="course-editing-nav-item">
                    <PersonIcon size="sm" className="me-2" />
                    C√° nh√¢n h√≥a
                  </Button>
                </div>
              </Col>
              <Col lg={5} xs={12} className="d-flex justify-content-end">
                <div className="course-editing-search-bar position-relative">
                  <input
                    type="text"
                    className="form-control"
                    placeholder="Nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm"
                    style={{ paddingRight: '40px' }}
                  />
                  <SearchIcon
                    className="position-absolute"
                    style={{ right: '10px', top: '50%', transform: 'translateY(-50%)' }}
                    size="sm"
                  />
                </div>
              </Col>
            </Row>
          </Container>
        </div>
      </header>

      {/* Content Area */}
      <div className="course-editing-content" style={{ backgroundColor: 'rgba(255, 255, 255, 0.3)' }}>
        <Container fluid className="px-4 py-4">
          {/* Course Info Section */}
          <Card className="course-info-card mb-4">
            <Card.Body className="px-3 py-3">
              <Row className="align-items-center">
                <Col>
                  <h5 className="mb-2 text-uppercase font-weight-bold">{courseName}</h5>
                  <div className="course-info-details">
                    <div className="row g-3">
                      <div className="col-md-6">
                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 180 }}>Gi·∫£ng vi√™n:</strong>
                          <div className="text-body">{displayInstructorName}</div>
                        </div>

                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 180 }}>Th·ªùi l∆∞·ª£ng d·ª± ki·∫øn:</strong>
                          <div className="text-body">{isConfigLoading ? 'ƒêang t·∫£i...' : (displayTotalHours ? `${displayTotalHours} gi·ªù` : 'Ch∆∞a ƒë·∫∑t')}</div>
                        </div>

                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 180 }}>Lo·∫°i kho√° h·ªçc:</strong>
                          <div className="text-body">{displayCourseType || 'Ch∆∞a ƒë·∫∑t'}</div>
                        </div>
                      </div>

                      <div className="col-md-6">
                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 140 }}>Tr√¨nh ƒë·ªô:</strong>
                          <div className="text-body">{displayCourseLevel || 'Ch∆∞a ƒë·∫∑t'}</div>
                        </div>

                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 140 }}>Ng√†y b·∫Øt ƒë·∫ßu:</strong>
                          <div className="text-body">{displayStartDate || 'Ch∆∞a ƒë·∫∑t'}</div>
                        </div>

                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 140 }}>Ng√†y k·∫øt th√∫c:</strong>
                          <div className="text-body">{displayEndDate || 'Ch∆∞a ƒë·∫∑t'}</div>
                        </div>
                      </div>

                      {/* Online link moved to bottom spanning full width */}
                      <div className="col-12">
                        <div className="mb-2 d-flex align-items-start">
                          <strong className="me-2 text-muted" style={{ minWidth: 140 }}>Li√™n k·∫øt l·ªõp h·ªçc tr·ª±c tuy·∫øn:</strong>
                          <div className="text-body" style={{ marginLeft: 8 }}>
                            {isConfigLoading ? (
                              <span>ƒêang t·∫£i...</span>
                            ) : displayOnlineCourseLink ? (
                              <a href={displayOnlineCourseLink} target="_blank" rel="noopener noreferrer">
                                {displayOnlineCourseLink}
                              </a>
                            ) : (
                              <span>Ch∆∞a ƒë·∫∑t</span>
                            )}
                          </div>
                        </div>
                      </div>

                      <div className="col-12">
                        <div className="mb-2 d-flex">
                          <strong className="me-2 text-muted" style={{ minWidth: 140 }}>M√¥ t·∫£ ng·∫Øn:</strong>
                          <div className="text-body">{displayShortDescription || 'Ch∆∞a c√≥'}</div>
                        </div>
                      </div>

                      {/* Course Start Status Badge */}
                      { (courseConfig?.start_date || (courseConfig as any)?.start) && (
                        <div className="col-12" style={{ marginTop: 6 }}>
                          <span style={{ marginRight: 8, fontWeight: 600, color: '#333' }}>Tr·∫°ng th√°i Kho√° h·ªçc:</span>
                          <span
                            style={{
                              background: isCourseStarted(courseConfig) ? '#e6f4ea' : '#f5f5f5',
                              color: isCourseStarted(courseConfig) ? '#2e7d32' : '#616161',
                              borderRadius: '6px',
                              padding: '6px 12px',
                              fontWeight: 600,
                              fontSize: 14,
                              display: 'inline-block',
                            }}
                          >
                            {isCourseStarted(courseConfig) ? 'ƒê√£ b·∫Øt ƒë·∫ßu' : 'Ch∆∞a b·∫Øt ƒë·∫ßu'}
                          </span>
                        </div>
                      )}
                    </div>
                  </div>
                </Col>
              </Row>

              {/* Buttons moved to bottom of card */}
              <Row className="mt-3">
                <Col />
                <Col xs="auto" className="d-flex align-items-center" style={{ gap: '12px' }}>
                  <Button
                    id="start-course-btn"
                    variant="outline-secondary"
                    onClick={handleStartCourseNow}
                    size="md"
                    disabled={isConfigLoading || isCourseStarted(courseConfig)}
                  >
                    B·∫Øt ƒë·∫ßu kho√° h·ªçc
                  </Button>
                  <Button
                    id="edit-course-config-btn"
                    data-testid="edit-course-config-btn"
                    variant="primary"
                    onClick={onConfigurationEdit}
                    size="md"
                    className="fw-bold px-3 py-2"
                    disabled={isConfigLoading}
                  >
                    {isConfigLoading ? 'ƒêang t·∫£i...' : 'Ch·ªânh s·ª≠a c·∫•u h√¨nh'}
                  </Button>
                </Col>
              </Row>
            </Card.Body>
          </Card>

          {/* Main Content Layout */}
          <Row>
            {/* Left Sidebar - Course Units */}
            <Col lg={4} className="mb-4">
              <Card className="course-chapters-card">
                <Card.Body className="p-3">
                  <div className="course-chapters-list">
                    {allUnits.length > 0 ? (
                      allUnits.map((unit, index) => {
                        const isSelected = unit.id === selectedSection?.id;

                        return (
                          <div
                            key={unit.id}
                            className={`course-chapter-item ${isSelected ? 'selected' : ''}`}
                            onClick={() => {
                              setSelectedSection(unit);
                              onSectionSelect(unit.id);
                            }}
                            style={{ cursor: 'pointer' }}
                          >
                            <div className="d-flex align-items-center p-3 rounded">
                              <div className="course-chapter-icon me-2">
                                <MenuIcon size="md" className="text-white" />
                              </div>
                              <div style={{ width: '12px' }} />
                              <div className="flex-grow-1">
                                <h6 className="mb-1 text-white">
                                  Chuy√™n ƒë·ªÅ {index + 1}: {unit.displayName}
                                </h6>
                                {unit.sectionTitle && (
                                  <small className="text-white-50">Thu·ªôc: {unit.sectionTitle}</small>
                                )}
                              </div>
                            </div>
                          </div>
                        );
                      })
                    ) : (
                      <div className="text-center text-white py-4">
                        <p className="mb-2">Ch∆∞a c√≥ chuy√™n ƒë·ªÅ n√†o</p>
                        <Button variant="light" size="sm">
                          Th√™m chuy√™n ƒë·ªÅ m·ªõi
                        </Button>
                      </div>
                    )}
                  </div>
                </Card.Body>
              </Card>
            </Col>

            {/* Right Panel - Content Details */}
            <Col lg={8}>
              <Card className="content-details-card">
                {selectedSection && (
                  <>
                    <Card.Header className={isFinalEvaluationUnit ? "bg-warning text-dark" : "bg-info text-white"}>
                      <Row className="align-items-center">
                        <Col xs="auto">
                          <MenuIcon size="md" className="me-2" />
                        </Col>
                        <Col>
                          <h6 className="mb-1">
                            {isFinalEvaluationUnit ? "üéØ " : ""}{selectedSection.displayName}
                          </h6>
                          <small>{isFinalEvaluationUnit ? "Ki·ªÉm tra cu·ªëi kh√≥a" : "N·ªôi dung chuy√™n ƒë·ªÅ"}</small>
                        </Col>
                        <Col xs="auto">
                          <Button size="sm" className="bg-success border-success">
                            Ph√°t h√†nh
                          </Button>
                        </Col>
                      </Row>
                    </Card.Header>
                    <Card.Body className="p-3">
                      {contentItems.map((item, index) => (
                        <div key={index} className="content-item border rounded p-3 mb-3">
                          <div
                            className="d-flex align-items-center justify-content-between"
                            style={(item.type === 'video' || item.type === 'slide') && item.hasContent ? { cursor: 'pointer' } : {}}
                            onClick={item.type === 'video' ? (e => {
                              if (e.target.tagName !== 'BUTTON') {
                                if (item.hasContent && item.onClick) {
                                  // If video has content and has onClick handler, call it
                                  item.onClick();
                                } else {
                                  // Otherwise just toggle collapse
                                  setVideoCollapsed(!videoCollapsed);
                                }
                              }
                            }) : item.type === 'slide' ? (e => {
                              if (e.target.tagName !== 'BUTTON' && item.hasContent && item.onClick) {
                                item.onClick();
                              }
                            }) : item.type === 'quiz' ? (e => {
                              if (e.target.tagName !== 'BUTTON' && item.hasContent && item.onClick) {
                                item.onClick();
                              }
                            }) : undefined}
                          >
                            <div className="d-flex align-items-center">
                              <div className="content-icon bg-light rounded-circle p-2">
                                <item.icon size="md" className="text-muted" />
                              </div>
                              <div style={{ width: '12px' }} />
                              <div className="ms-3">
                                <h6 className="mb-1">{item.title}</h6>
                                {item.subtitle && (
                                  <small className="text-muted">{item.subtitle}</small>
                                )}
                              </div>
                            </div>
                            <div className="d-flex align-items-center">
                              <Button
                                size="sm"
                                variant="info"
                                className="me-2 mb-1"
                                onClick={(e) => {
                                  e.stopPropagation();
                                  if (item.type === 'video') {
                                    handleVideoCreate(selectedSection);
                                  } else if (item.type === 'slide') {
                                    handleVideoUpload(item.type);
                                  } else if (item.type === 'quiz' && item.onQuizCreate) {
                                    item.onQuizCreate();
                                  } else if (item.type === 'project-question' && item.onProjectConfig) {
                                    item.onProjectConfig();
                                  } else if (item.type === 'quiz-upload' && item.onQuizUpload) {
                                    item.onQuizUpload();
                                  } else if (item.type === 'evaluation-config' && item.onEvaluationConfig) {
                                    item.onEvaluationConfig();
                                  }
                                }}
                                disabled={isUploading && (item.type === 'video' || item.type === 'slide')}
                              >
                                {item.primaryAction}
                              </Button>
                              <div style={{ width: '8px' }} />
                              {item.secondaryAction && (
                                <Button
                                  size="sm"
                                  variant="secondary"
                                  className="mb-1"
                                  onClick={(item.type === 'video' || item.type === 'slide') ? (e => e.stopPropagation()) : undefined}
                                >
                                  {item.secondaryAction}
                                </Button>
                              )}
                            </div>
                          </div>
                          {/* Collapsible video player for video item */}
                          {item.type === 'video' && item.hasContent && item.videoUrl && !videoCollapsed && (
                            <div className="mt-3">
                              {(() => {
                                const url = item.videoUrl || '';
                                const isYouTube = /(?:youtube\.com|youtu\.be)/i.test(url);
                                const isDrive = /drive\.google\.com/i.test(url);
                                if (isYouTube) {
                                  const embed = (item.publicUrl && String(item.publicUrl)) || url.replace('watch?v=', 'embed/').replace('youtu.be/', 'youtube.com/embed/');
                                  return (
                                    <iframe
                                      width="100%"
                                      height="320"
                                      src={embed}
                                      title={item.displayName || 'YouTube Video'}
                                      frameBorder="0"
                                      allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                                      allowFullScreen
                                    />
                                  );
                                }
                                if (isDrive) {
                                  const preview = (item.publicUrl && String(item.publicUrl)) || url.replace('/view', '/preview');
                                  return (
                                    <iframe
                                      width="100%"
                                      height="320"
                                      src={preview}
                                      title={item.displayName || 'Google Drive Video'}
                                      frameBorder="0"
                                      allowFullScreen
                                    />
                                  );
                                }
                                return (
                                  <video width="100%" height="320" controls src={item.publicUrl || item.videoUrl} />
                                );
                              })()}
                            </div>
                          )}
                        </div>
                      ))}
                    </Card.Body>
                  </>
                )}
              </Card>
            </Col>
          </Row>
        </Container>
      </div>

      {/* Toast for upload status */}
      {showToast && (isUploading || (uploadMessage && uploadMessage !== null)) && (
        <Toast
          open={showToast}
          onClose={() => setShowToast(false)}
          autoHideDuration={3000}
          placement="top"
          variant={uploadMessage === 'T·∫£i l√™n th√†nh c√¥ng!' ? 'success' : uploadMessage === 'ƒêang t·∫£i l√™n...' ? 'info' : 'danger'}
        >
          {uploadMessage}
        </Toast>
      )}

      {/* Footer */}
      <footer className="course-editing-footer bg-primary text-white py-4 mt-auto">
        <Container fluid className="text-center">
          <p className="mb-0">Ch·ªãu tr√°ch nhi·ªám n·ªôi dung b·ªüi {displayInstructorName}</p>
          <p className="mb-0 small">Copyright@2025</p>
        </Container>
      </footer>

      {/* Video Selection Modal */}
      <StandardModal
        title="Ch·ªçn Video ƒë·ªÉ ph√°t"
        isOpen={showVideoModal}
        onClose={() => setShowVideoModal(false)}
        size="lg"
      >
        <div>
          {selectedVideoData && selectedVideoData.videos.length > 0 ? (
            <div>
              <p>Ch·ªçn m·ªôt video ƒë·ªÉ ph√°t cho b√†i h·ªçc: <strong>{selectedVideoData.unit?.displayName}</strong></p>
              <div className="video-list" style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                {selectedVideoData.videos.map((video, index) => (
                  <Card key={video.id || video.edxVideoId || index} className="mb-3">
                    <Card.Body>
                      <div className="d-flex align-items-center" style={{ gap: '6px' }}>
                        <VideoIcon className="me-3 text-primary" style={{ fontSize: '2rem', margin: '4px' }} />
                        <div className="flex-grow-1" style={{ padding: '10px' }}>
                          <h6 className="mb-1">{video.displayName || video.fileName || video.clientVideoId || 'Untitled Video'}</h6>
                          <small className="text-muted">
                            Video ID: {video.id || video.edxVideoId}
                            {video.duration && ` ‚Ä¢ Th·ªùi l∆∞·ª£ng: ${Math.floor(video.duration / 60)}:${String(video.duration % 60).padStart(2, '0')}`}
                            {video.formattedFileSize && ` ‚Ä¢ K√≠ch th∆∞·ªõc: ${video.formattedFileSize}`}
                          </small>
                        </div>
                        <div className="d-flex" style={{ gap: '6px' }}>
                          <Button
                            variant="primary"
                            size="sm"
                            onClick={() => {
                              // Open video player modal
                              handlePlayVideo(video);
                            }}
                          >
                            Ph√°t Video
                          </Button>
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteVideo(video.id || video.edxVideoId, video.displayName || video.fileName || video.clientVideoId || 'Untitled Video');
                            }}
                          >
                            Xo√°
                          </Button>
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <p>Kh√¥ng c√≥ video n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p>
          )}
        </div>
      </StandardModal>

      {/* Project Question Modal (Final Evaluation: N·ªôp b√†i thu ho·∫°ch) */}
      <StandardModal
        title="C·∫•u h√¨nh c√¢u h·ªèi b√†i thu ho·∫°ch"
        isOpen={showProjectModal}
        onClose={() => setShowProjectModal(false)}
        size="lg"
        footerNode={(
          <div className="d-flex justify-content-end gap-2">
            <Button variant="secondary" onClick={() => setShowProjectModal(false)}>H·ªßy</Button>
            <Button variant="primary" onClick={saveProjectQuestion} disabled={isUploading}>L∆∞u</Button>
          </div>
        )}
      >
        <Form>
          <Form.Group className="mb-3">
            <Form.Label className="fw-bold">C√¢u h·ªèi cho h·ªçc vi√™n (H∆∞·ªõng d·∫´n n·ªôp b√†i)</Form.Label>
            <FormControl
              as="textarea"
              rows={5}
              placeholder="Nh·∫≠p n·ªôi dung c√¢u h·ªèi / h∆∞·ªõng d·∫´n n·ªôp b√†i..."
              value={projectQuestion}
              onChange={(e) => setProjectQuestion((e.target as HTMLTextAreaElement).value)}
            />
            <Form.Text className="text-muted">H·ªçc vi√™n s·∫Ω th·∫•y c√¢u h·ªèi n√†y trong LMS v√† c√≥ th·ªÉ t·∫£i l√™n file docx ho·∫∑c pptx l√†m b√†i t·∫≠p.</Form.Text>
          </Form.Group>
        </Form>
      </StandardModal>

      {/* Quiz Upload Modal (Final Evaluation: L√†m b√†i tr·∫Øc nghi·ªám) */}
      <StandardModal
        title="T·∫£i l√™n ƒë·ªÅ thi tr·∫Øc nghi·ªám (Excel)"
        isOpen={showQuizUploadModal}
        onClose={() => {
          setShowQuizUploadModal(false);
          setQuizUploadPreview(null);
          setSelectedQuizFile(null);
        }}
        size="lg"
        footerNode={(
          <div className="d-flex justify-content-between">
            <div>
              <Button variant="outline-info" size="sm" onClick={async () => {
                const { downloadQuizTemplate } = await import('./data/excelTemplateGenerator');
                downloadQuizTemplate();
              }}>
                üìÑ T·∫£i template Excel
              </Button>
            </div>
            <div className="d-flex gap-2">
              <Button variant="secondary" onClick={() => {
                setShowQuizUploadModal(false);
                setQuizUploadPreview(null);
                setSelectedQuizFile(null);
              }}>
                {quizUploadPreview ? 'ƒê√≥ng' : 'H·ªßy'}
              </Button>
              {!quizUploadPreview && (
                <Button variant="primary" onClick={uploadQuizExcel} disabled={isUploading || !selectedQuizFile}>
                  {isUploading ? 'ƒêang x·ª≠ l√Ω...' : 'X·ª≠ l√Ω Excel'}
                </Button>
              )}
            </div>
          </div>
        )}
      >
        <div>
          <div className="mb-3">
            <p className="mb-2">
              <strong>ƒê·ªãnh d·∫°ng file Excel y√™u c·∫ßu:</strong>
            </p>
            <ul className="small text-muted">
              <li>C·ªôt A: <strong>T√™n c√¢u h·ªèi</strong> - N·ªôi dung c√¢u h·ªèi</li>
              <li>C·ªôt B: <strong>ƒê√°p √°n ƒë√∫ng</strong> - S·ªë th·ª© t·ª± ƒë√°p √°n ƒë√∫ng (1, 2, 3, 4)</li>
              <li>C·ªôt C: <strong>S·ªë ƒëi·ªÉm</strong> - ƒêi·ªÉm cho c√¢u h·ªèi (t√πy ch·ªçn)</li>
              <li>C·ªôt D-G: <strong>ƒê√°p √°n 1, 2, 3, 4</strong> - C√°c l·ª±a ch·ªçn</li>
            </ul>
          </div>

          <Form.Group className="mb-3">
            <Form.Label>Ch·ªçn file Excel</Form.Label>
            <Form.Control
              type="file"
              accept=".xlsx,.xls"
              onChange={(e) => setSelectedQuizFile(e.target.files && e.target.files[0] ? e.target.files[0] : null)}
              disabled={isUploading}
            />
            <Form.Text className="text-muted">
              H·ªó tr·ª£ file .xlsx v√† .xls
            </Form.Text>
          </Form.Group>

          {selectedQuizFile && !quizUploadPreview && (
            <div className="alert alert-info">
              <small>
                <strong>File ƒë√£ ch·ªçn:</strong> {selectedQuizFile.name} ({(selectedQuizFile.size / 1024).toFixed(1)} KB)
              </small>
            </div>
          )}

          {quizUploadPreview && (
            <div className="mt-3">
              <div className="alert alert-success">
                <h6 className="alert-heading">‚úÖ X·ª≠ l√Ω th√†nh c√¥ng!</h6>
                <p className="mb-2">
                  <strong>File:</strong> {quizUploadPreview.summary?.fileName}<br/>
                  <strong>T·ªïng s·ªë d√≤ng:</strong> {quizUploadPreview.summary?.totalRows}<br/>
                  <strong>C√¢u h·ªèi h·ª£p l·ªá:</strong> {quizUploadPreview.summary?.validQuizzes}
                </p>
              </div>

              {quizUploadPreview.sampleQuestions && (
                <div>
                  <h6>üìã Xem tr∆∞·ªõc m·ªôt s·ªë c√¢u h·ªèi:</h6>
                  <div style={{ maxHeight: 300, overflow: 'auto', background: '#f8f9fa', padding: 12, border: '1px solid #dee2e6', borderRadius: 4 }}>
                    {quizUploadPreview.sampleQuestions.map((question, index) => (
                      <div key={index} className="mb-3 pb-2 border-bottom">
                        <strong>C√¢u {index + 1}:</strong> {question.question_text}
                        <ul className="mb-0 mt-1">
                          {question.choices.map((choice, choiceIndex) => (
                            <li key={choiceIndex} className={choice.is_correct ? 'text-success fw-bold' : ''}>
                              {choice.text} {choice.is_correct && '‚úì'}
                            </li>
                          ))}
                        </ul>
                        {question.points && question.points !== 1 && (
                          <small className="text-muted">ƒêi·ªÉm: {question.points}</small>
                        )}
                      </div>
                    ))}
                    {quizUploadPreview.summary?.validQuizzes > 3 && (
                      <div className="text-center text-muted">
                        <small>... v√† {quizUploadPreview.summary.validQuizzes - 3} c√¢u h·ªèi kh√°c</small>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          )}
        </div>
      </StandardModal>

      {/* Video Player Modal */}
      <StandardModal
        title={`Ph√°t Video: ${currentVideo?.displayName || currentVideo?.fileName || currentVideo?.clientVideoId || 'Untitled Video'}`}
        isOpen={showVideoPlayerModal}
        onClose={() => setShowVideoPlayerModal(false)}
        size="xl"
      >
        <div style={{ textAlign: 'center', padding: '20px' }}>
          {/* Check if this is an external video (YouTube, Google Drive) or an uploaded video with a publicUrl that is an embed */}
          {(() => {
            const pub = currentVideo?.publicUrl || '';
            const url = currentVideo?.external_url || currentVideo?.url || '';
            const combined = String(pub || url || '');
            const isYouTube = /(?:youtube\.com\/embed|youtube\.com|youtu\.be)/i.test(combined) || currentVideo?.video_source_type === 'youtube';
            const isDrive = /drive\.google\.com/i.test(combined) || currentVideo?.video_source_type === 'google_drive';

            if (isYouTube) {
              const embedSrc = pub || (url || '').replace('watch?v=', 'embed/').replace('youtu.be/', 'youtube.com/embed/');
              return (
                <iframe
                  width="100%"
                  height="500"
                  src={embedSrc}
                  title={currentVideo?.displayName || 'YouTube Video'}
                  frameBorder="0"
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                  allowFullScreen
                />
              );
            }

            if (isDrive) {
              const driveSrc = pub || (url || '').replace('/view', '/preview');
              return (
                <iframe
                  width="100%"
                  height="500"
                  src={driveSrc}
                  title={currentVideo?.displayName || 'Google Drive Video'}
                  frameBorder="0"
                  allowFullScreen
                />
              );
            }

            return (
              (currentVideo?.publicUrl || currentVideo?.downloadLink || currentVideo?.url || currentVideo?.uploadUrl || currentVideo?.clientVideoId) ? (
            // Regular uploaded videos
            <video
              controls
              style={{ width: '100%', maxHeight: '500px' }}
              src={
                currentVideo?.publicUrl
                || currentVideo?.uploadUrl
                || currentVideo?.downloadLink
                || currentVideo?.url
                || `/cms/api/contentstore/v0/videos/stream/${currentVideo?.clientVideoId || currentVideo?.edxVideoId}`
              }
              title={currentVideo?.displayName || currentVideo?.fileName || currentVideo?.clientVideoId}
              onError={(e) => {
                // eslint-disable-next-line no-console
                console.error('Video error:', e);
                
                // Prevent infinite loops by limiting retry attempts
                if (videoErrorCount >= 3) {
                  return;
                }                setVideoErrorCount(prev => prev + 1);

                // Simple fallback logic - try the next available URL
                const currentSrc = e.target.src;
                if (currentSrc === currentVideo?.publicUrl && currentVideo?.uploadUrl) {
                  e.target.src = currentVideo.uploadUrl;
                } else if (currentSrc === currentVideo?.uploadUrl && currentVideo?.downloadLink) {
                  e.target.src = currentVideo.downloadLink;
                } else if (currentSrc === currentVideo?.downloadLink && currentVideo?.url) {
                  e.target.src = currentVideo.url;
                } else if (!currentSrc.includes('/stream/') && (currentVideo?.clientVideoId || currentVideo?.edxVideoId)) {
                  e.target.src = `/cms/api/contentstore/v0/videos/stream/${currentVideo?.clientVideoId || currentVideo?.edxVideoId}`;
                }
              }}
              onLoadStart={() => {
                const videoSrc = currentVideo?.publicUrl
                  || currentVideo?.uploadUrl
                  || currentVideo?.downloadLink
                  || currentVideo?.url
                  || `/cms/api/contentstore/v0/videos/stream/${currentVideo?.clientVideoId || currentVideo?.edxVideoId}`;
                console.log('Video load started, URL:', videoSrc);
                console.log('Video metadata:', {
                  uploadUrl: currentVideo?.uploadUrl,
                  publicUrl: currentVideo?.publicUrl,
                  downloadLink: currentVideo?.downloadLink,
                  url: currentVideo?.url,
                  clientVideoId: currentVideo?.clientVideoId,
                  edxVideoId: currentVideo?.edxVideoId,
                });
              }}
            >
              Tr√¨nh duy·ªát c·ªßa b·∫°n kh√¥ng h·ªó tr·ª£ th·∫ª video.
            </video>
            ) : (
            <div>
              <p>Kh√¥ng th·ªÉ ph√°t video n√†y.</p>
              <p>Video ID: {currentVideo?.id || currentVideo?.edxVideoId}</p>
              <p>Status: {currentVideo?.status || 'Unknown'}</p>
              <p>Upload URL: {currentVideo?.uploadUrl || 'Not available'}</p>
              <p>Download Link: {currentVideo?.downloadLink || 'Not available'}</p>
              <p>Public URL: {currentVideo?.publicUrl || 'Not available'}</p>
              <p>URL: {currentVideo?.url || 'Not available'}</p>
              <p>C√≥ th·ªÉ video ch∆∞a ƒë∆∞·ª£c t·∫£i l√™n ho√†n t·∫•t ho·∫∑c kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n ph√°t.</p>
            </div>
          )
          );
          })()}
        </div>
      </StandardModal>

      {/* Slide Selection Modal */}
      <StandardModal
        title="Ch·ªçn Slide ƒë·ªÉ xem"
        isOpen={showSlideModal}
        onClose={() => setShowSlideModal(false)}
        size="lg"
      >
        <div>
          {selectedSlideData && selectedSlideData.slides.length > 0 ? (
            <div>
              <p>Ch·ªçn m·ªôt slide ƒë·ªÉ xem cho b√†i h·ªçc: <strong>{selectedSlideData.unit?.displayName}</strong></p>
              <div className="slide-list" style={{ display: 'flex', flexDirection: 'column', gap: '12px'}}>
                {selectedSlideData.slides.map((slide, index) => (
                  <Card key={slide.slideId || index} className="mb-3">
                    <Card.Body>
                      <div className="d-flex align-items-center" style={{ gap: '6px', margin: '4px 0px 0px 0px' }}>
                        <SlideIcon className="me-3 text-primary" style={{ fontSize: '2rem', margin: '8px' }} />
                        <div className="flex-grow-1" style={{ padding: '10px' }}>
                          <h6 className="mb-1">{slide.displayName || slide.fileName || 'Untitled Slide'}</h6>
                          <small className="text-muted">
                            Slide ID: {slide.slideId}
                            {slide.fileSize && (
                              <>
                              <br />
                              ‚Ä¢ K√≠ch th∆∞·ªõc: {
                                (() => {
                                const size = slide.fileSize;
                                if (size < 1024) return `${size} B`;
                                if (size < 1024 * 1024) return `${(size / 1024).toFixed(1)} KB`;
                                if (size < 1024 * 1024 * 1024) return `${(size / (1024 * 1024)).toFixed(1)} MB`;
                                return `${(size / (1024 * 1024 * 1024)).toFixed(2)} GB`;
                                })()
                              }
                              </>
                            )}
                            {slide.fileType && (
                              <>
                              <br />
                              ‚Ä¢ Lo·∫°i: {slide.fileType}
                              {slide.is_pptx && <span className="badge badge-info ms-1" style={{ fontSize: '0.7em', backgroundColor: '#17a2b8', color: 'white' }}>JS Viewer</span>}
                              </>
                            )}
                          </small>
                        </div>
                        <div className="d-flex" style={{ gap: '6px' , padding: '6px'}}>
                          <Button
                            variant="primary"
                            size="sm"
                            onClick={() => {
                              handleViewSlide(slide);
                            }}
                          >
                            Xem Slide
                          </Button>
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteSlide(slide.slideId, slide.displayName || slide.fileName || 'Untitled Slide');
                            }}
                          >
                            Xo√°
                          </Button>
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <p>Kh√¥ng c√≥ slide n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p>
          )}
        </div>
      </StandardModal>

      {/* File Viewer Modal */}
      {currentSlide && (
        <FileViewerModal
          isOpen={showFileViewerModal}
          onClose={() => setShowFileViewerModal(false)}
          fileUrl={
            currentSlide.viewer_url
            || currentSlide.publicUrl
            || currentSlide.uploadUrl
            || currentSlide.downloadLink
            || currentSlide.url
          }
          fileName={currentSlide.displayName || currentSlide.fileName || 'Untitled File'}
          fileType={currentSlide.fileType || currentSlide.contentType}
        />
      )}

      {/* Quiz List Modal */}
      <StandardModal
        title="Danh s√°ch c√¢u h·ªèi tr·∫Øc nghi·ªám"
        isOpen={showQuizListModal}
        onClose={() => setShowQuizListModal(false)}
        size="lg"
      >
        <div>
          {selectedQuizData && selectedQuizData.quizzes.length > 0 ? (
            <div>
              <p>C√¢u h·ªèi tr·∫Øc nghi·ªám cho b√†i h·ªçc: <strong>{selectedQuizData.unit?.displayName}</strong></p>
              <div className="quiz-list" style={{ display: 'flex', flexDirection: 'column', gap: '12px' }}>
                {selectedQuizData.quizzes.map((quiz, index) => (
                  <Card key={quiz.id || index} className="mb-3">
                    <Card.Body>
                      <div className="d-flex align-items-center" style={{ gap: '6px' }}>
                        <QuizIcon className="me-3 text-primary" style={{ fontSize: '2rem', margin: '4px' }} />
                        <div className="flex-grow-1" style={{ padding: '10px' }}>
                          <h6 className="mb-1">{quiz.title || 'Untitled Quiz'}</h6>
                          <small className="text-muted">
                            Quiz ID: {quiz.id}
                            <br />
                            ‚Ä¢ S·ªë c√¢u h·ªèi: {quiz.question_count}
                            <br />
                            ‚Ä¢ Ng√†y t·∫°o: {new Date(quiz.created_at).toLocaleDateString('vi-VN')}
                            {quiz.description && (
                              <>
                                <br />
                                ‚Ä¢ M√¥ t·∫£: {quiz.description}
                              </>
                            )}
                          </small>
                        </div>
                        <div className="d-flex flex-column" style={{ gap: '6px' }}>
                          <div className="d-flex" style={{ gap: '6px' }}>
                            <Button
                              variant="outline-info"
                              size="sm"
                              onClick={() => handlePreviewQuiz(quiz)}
                              className="d-flex align-items-center"
                            >
                              <PreviewIcon className="me-1" style={{ fontSize: '14px' }} />
                              Xem tr∆∞·ªõc
                            </Button>
                            <Button
                              variant="primary"
                              size="sm"
                              onClick={() => handleEditQuiz(quiz)}
                              className="d-flex align-items-center"
                            >
                              <EditIcon className="me-1" style={{ fontSize: '14px' }} />
                              Ch·ªânh s·ª≠a
                            </Button>
                          </div>
                          <Button
                            variant="danger"
                            size="sm"
                            onClick={(e) => {
                              e.stopPropagation();
                              handleDeleteQuiz(quiz.id, quiz.title || 'Untitled Quiz');
                            }}
                            className="d-flex align-items-center justify-content-center"
                          >
                            <DeleteIcon className="me-1" style={{ fontSize: '14px' }} />
                            Xo√°
                          </Button>
                        </div>
                      </div>
                    </Card.Body>
                  </Card>
                ))}
              </div>
            </div>
          ) : (
            <p>Kh√¥ng c√≥ c√¢u h·ªèi tr·∫Øc nghi·ªám n√†o ƒë·ªÉ hi·ªÉn th·ªã.</p>
          )}
        </div>
      </StandardModal>

      {/* Quiz Creation/Edit Modal */}
      <StandardModal
        title={editingQuizId ? "Ch·ªânh s·ª≠a c√¢u h·ªèi tr·∫Øc nghi·ªám" : "T·∫°o c√¢u h·ªèi tr·∫Øc nghi·ªám"}
        isOpen={showQuizModal}
        onClose={() => {
          setShowQuizModal(false);
          resetQuizForm();
        }}
        size="lg"
        footerNode={(
          <div className="d-flex justify-content-end gap-2">
            <Button
              variant="secondary"
              onClick={() => {
                setShowQuizModal(false);
                resetQuizForm();
              }}
            >
              H·ªßy
            </Button>
            <Button
              variant="primary"
              onClick={handleQuizSubmit}
            >
              {editingQuizId ? 'C·∫≠p nh·∫≠t c√¢u h·ªèi' : 'T·∫°o c√¢u h·ªèi'}
            </Button>
          </div>
        )}
      >
        <Form>
          {/* Question Input */}
          <Form.Group className="mb-4">
            <Form.Label className="fw-bold">C√¢u h·ªèi</Form.Label>
            <FormControl
              as="textarea"
              rows={3}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
              value={quizData.question}
              onChange={(e) => setQuizData(prev => ({ ...prev, question: e.target.value }))}
            />
          </Form.Group>

          {/* Multiple Choice Toggle */}
          <Form.Group className="mb-4">
            <FormCheck
              type="switch"
              id="multiple-choice-switch"
              label="Cho ph√©p ch·ªçn nhi·ªÅu ƒë√°p √°n"
              checked={quizData.multipleChoice}
              onChange={(e) => {
                const isMultiple = e.target.checked;
                setQuizData(prev => ({
                  ...prev,
                  multipleChoice: isMultiple,
                  correctAnswers: isMultiple ? prev.correctAnswers : prev.correctAnswers.slice(0, 1)
                }));
              }}
            />
          </Form.Group>

          {/* Choices */}
          <Form.Group className="mb-4">
            <Form.Label className="fw-bold">
              C√°c l·ª±a ch·ªçn 
              <small className="text-muted ms-2">
                (Tick v√†o √¥ b√™n c·∫°nh ƒë·ªÉ ƒë√°nh d·∫•u ƒë√°p √°n ƒë√∫ng)
              </small>
            </Form.Label>
            {quizData.choices.map((choice, index) => (
              <div key={index} className="d-flex align-items-center mb-2">
                <FormCheck
                  type={quizData.multipleChoice ? "checkbox" : "radio"}
                  id={`choice-correct-${index}`}
                  name="correct-answers"
                  checked={quizData.correctAnswers.includes(index)}
                  onChange={() => toggleCorrectAnswer(index)}
                  className="me-2"
                />
                <FormControl
                  type="text"
                  placeholder={`L·ª±a ch·ªçn ${index + 1}`}
                  value={choice}
                  onChange={(e) => updateChoice(index, e.target.value)}
                  className="me-2"
                />
                {quizData.choices.length > 1 && (
                  <Button
                    variant="outline-danger"
                    size="sm"
                    onClick={() => removeChoice(index)}
                  >
                    <DeleteIcon size="sm" />
                  </Button>
                )}
              </div>
            ))}
            <Button
              variant="outline-primary"
              size="sm"
              onClick={addChoice}
              className="mt-2"
            >
              <AddIcon size="sm" className="me-1" />
              Th√™m l·ª±a ch·ªçn
            </Button>
          </Form.Group>

          {/* Preview */}
          {quizData.question && (
            <div className="border rounded p-3 bg-light">
              <h6 className="fw-bold">Xem tr∆∞·ªõc:</h6>
              <p><strong>C√¢u h·ªèi:</strong> {quizData.question}</p>
              <p><strong>Lo·∫°i:</strong> {quizData.multipleChoice ? 'Ch·ªçn nhi·ªÅu ƒë√°p √°n' : 'Ch·ªçn m·ªôt ƒë√°p √°n'}</p>
              <p><strong>C√°c l·ª±a ch·ªçn:</strong></p>
              <ul>
                {quizData.choices.map((choice, index) => (
                  <li 
                    key={index} 
                    className={quizData.correctAnswers.includes(index) ? 'text-success fw-bold' : ''}
                  >
                    {choice || `L·ª±a ch·ªçn ${index + 1}`}
                    {quizData.correctAnswers.includes(index) && ' ‚úì'}
                  </li>
                ))}
              </ul>
            </div>
          )}
        </Form>
      </StandardModal>

      {/* Quiz Preview Modal */}
      <StandardModal
        title="Xem tr∆∞·ªõc c√¢u h·ªèi tr·∫Øc nghi·ªám"
        isOpen={showQuizPreviewModal}
        onClose={() => setShowQuizPreviewModal(false)}
        size="lg"
        footerNode={(
          <div className="d-flex justify-content-between">
            <Button
              variant="primary"
              onClick={() => {
                setShowQuizPreviewModal(false);
                if (currentPreviewQuiz) {
                  handleEditQuiz(currentPreviewQuiz);
                }
              }}
            >
              Ch·ªânh s·ª≠a c√¢u h·ªèi
            </Button>
            <Button
              variant="secondary"
              onClick={() => setShowQuizPreviewModal(false)}
            >
              ƒê√≥ng
            </Button>
          </div>
        )}
      >
        {currentPreviewQuiz && (
          <div>
            <Card className="mb-3">
              <Card.Header className="bg-primary text-white">
                <h5 className="mb-0">{currentPreviewQuiz.title || 'Untitled Quiz'}</h5>
                <small>
                  Quiz ID: {currentPreviewQuiz.id} | 
                  S·ªë c√¢u h·ªèi: {currentPreviewQuiz.question_count} | 
                  Ng√†y t·∫°o: {new Date(currentPreviewQuiz.created_at).toLocaleDateString('vi-VN')}
                </small>
              </Card.Header>
              <Card.Body>
                {currentPreviewQuiz.description && (
                  <div className="mb-3">
                    <strong>M√¥ t·∫£:</strong> {currentPreviewQuiz.description}
                  </div>
                )}
                
                {currentPreviewQuiz.questions && currentPreviewQuiz.questions.length > 0 ? (
                  <div>
                    {currentPreviewQuiz.questions.map((question, questionIndex) => (
                      <div key={questionIndex} className="mb-4">
                        <div className="mb-3">
                          <strong>C√¢u h·ªèi {questionIndex + 1}:</strong>
                          <p className="mt-2 p-3 bg-light rounded">{question.question_text}</p>
                        </div>
                        
                        <div className="mb-3">
                          <strong>Lo·∫°i c√¢u h·ªèi:</strong> {
                            question.question_type === 'multiple_choice' 
                              ? 'Cho ph√©p ch·ªçn nhi·ªÅu ƒë√°p √°n' 
                              : 'Ch·ªçn m·ªôt ƒë√°p √°n'
                          }
                        </div>
                        
                        <div>
                          <strong>C√°c l·ª±a ch·ªçn:</strong>
                          <div className="mt-2">
                            {question.choices.map((choice, choiceIndex) => (
                              <div 
                                key={choiceIndex} 
                                className={`p-3 mb-2 border rounded ${choice.is_correct ? 'bg-success text-white border-success' : 'bg-light border-secondary'}`}
                                style={{ 
                                  borderWidth: choice.is_correct ? '2px' : '1px',
                                  boxShadow: choice.is_correct ? '0 2px 4px rgba(0,0,0,0.1)' : 'none'
                                }}
                              >
                                <div className="d-flex align-items-center">
                                  <span className="me-3" style={{ fontSize: '16px', fontWeight: 'bold', marginRight: '12px' }}>
                                    {question.question_type === 'multiple_choice' 
                                      ? (choice.is_correct ? '‚òë' : '‚òê') 
                                      : (choice.is_correct ? '‚óè' : '‚óã')
                                    }
                                  </span>
                                  <span className="flex-grow-1">{choice.text}</span>
                                  {choice.is_correct && (
                                    <span className="badge bg-light text-success ms-2 fw-bold">‚úì ƒê√°p √°n ƒë√∫ng</span>
                                  )}
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <p className="text-muted">Kh√¥ng c√≥ c√¢u h·ªèi n√†o ƒë∆∞·ª£c t√¨m th·∫•y.</p>
                )}
              </Card.Body>
            </Card>
          </div>
        )}
      </StandardModal>

      {/* Video Source Selection Modal */}
      <StandardModal
        title="Ch·ªçn ngu·ªìn video"
        isOpen={showVideoSourceModal}
        onClose={() => setShowVideoSourceModal(false)}
        size="md"
        footerNode={(
          <div className="d-flex justify-content-end">
            <Button
              variant="secondary"
              onClick={() => setShowVideoSourceModal(false)}
            >
              H·ªßy
            </Button>
          </div>
        )}
      >
        <div className="text-center">
          <p className="mb-4">B·∫°n mu·ªën th√™m video b·∫±ng c√°ch n√†o?</p>
          <div className="d-flex justify-content-center gap-3">
            <Button
              variant="primary"
              size="lg"
              className="px-4 py-3"
              onClick={() => handleVideoSourceSelection('upload')}
            >
              <i className="fas fa-upload me-2"></i>
              T·∫£i l√™n video
            </Button>
            <Button
              variant="outline-primary"
              size="lg"
              className="px-4 py-3"
              onClick={() => handleVideoSourceSelection('url')}
            >
              <i className="fas fa-link me-2"></i>
              Th√™m link video
            </Button>
          </div>
          <small className="text-muted mt-3 d-block">
            B·∫°n c√≥ th·ªÉ t·∫£i l√™n file video ho·∫∑c th√™m link t·ª´ YouTube, Google Drive
          </small>
        </div>
      </StandardModal>

      {/* Video URL Input Modal */}
      <StandardModal
        title="Th√™m link video"
        isOpen={showVideoUrlModal}
        onClose={() => {
          setShowVideoUrlModal(false);
          setVideoUrl('');
          setVideoUrlError('');
          setIsSubmittingUrl(false);
        }}
        size="md"
        footerNode={(
          <div className="d-flex justify-content-end gap-2">
            <Button
              variant="secondary"
              onClick={() => {
                setShowVideoUrlModal(false);
                setVideoUrl('');
                setVideoUrlError('');
                setIsSubmittingUrl(false);
              }}
              disabled={isSubmittingUrl}
            >
              H·ªßy
            </Button>
            <Button
              variant="primary"
              onClick={handleVideoUrlSubmit}
              disabled={isSubmittingUrl}
            >
              {isSubmittingUrl ? (
                <>
                  <span className="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                  ƒêang th√™m...
                </>
              ) : (
                'Th√™m video'
              )}
            </Button>
          </div>
        )}
      >
        <div>
          <p className="mb-3">Nh·∫≠p URL video t·ª´ YouTube ho·∫∑c Google Drive:</p>
          
          <Form.Group className="mb-3">
            <Form.Label>URL Video <span className="text-danger">*</span></Form.Label>
            <Form.Control
              type="url"
              placeholder="https://www.youtube.com/watch?v=... ho·∫∑c https://drive.google.com/file/d/..."
              value={videoUrl}
              onChange={(e) => {
                setVideoUrl(e.target.value);
                if (videoUrlError) setVideoUrlError('');
              }}
              isInvalid={!!videoUrlError}
            />
            {videoUrlError && (
              <div className="invalid-feedback d-block">
                {videoUrlError}
              </div>
            )}
          </Form.Group>

          <div className="mt-3 p-3 bg-light rounded">
            <h6 className="mb-2">ƒê·ªãnh d·∫°ng URL ƒë∆∞·ª£c h·ªó tr·ª£:</h6>
            <ul className="mb-0 small">
              <li><strong>YouTube:</strong> https://www.youtube.com/watch?v=VIDEO_ID</li>
              <li><strong>YouTube:</strong> https://youtu.be/VIDEO_ID</li>
              <li><strong>Google Drive:</strong> https://drive.google.com/file/d/FILE_ID/view</li>
            </ul>
          </div>
        </div>
      </StandardModal>
    </div>
  );
};

export default CourseEditingLayout;
